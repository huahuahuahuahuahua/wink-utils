{"version":3,"sources":["../node_modules/@babel/runtime/helpers/typeof.js","cloneDeep.ts","isObject.ts","addObjIterator.ts"],"names":["_typeof","obj","module","exports","Symbol","iterator","constructor","prototype","__esModule"],"mappings":";AAAA,SAASA,EAAQC,GAGR,OAACC,OAAOC,QAAUH,EAAU,mBAAqBI,QAAU,iBAAmBA,OAAOC,SAAW,SAAUJ,GACxG,cAAOA,GACZ,SAAUA,GACLA,OAAAA,GAAO,mBAAqBG,QAAUH,EAAIK,cAAgBF,QAAUH,IAAQG,OAAOG,UAAY,gBAAkBN,GACvHC,OAAOC,QAAQK,YAAa,EAAMN,OAAOC,QAAP,QAA4BD,OAAOC,QAAUH,EAAQC,GAG5FC,OAAOC,QAAUH,EAASE,OAAOC,QAAQK,YAAa,EAAMN,OAAOC,QAAP,QAA4BD,OAAOC;;ACmB/F,aAAA,IAAA,EAAA,EAAA,QAAA,kCAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvBA,SAAgB,EAAU,GAEpB,GAAO,MAAP,EAAa,OAAO,EACpB,QAAc,IAAP,EAAoB,OAAO,EAElC,GAAA,aAAe,KAAM,OAAO,IAAI,KAAK,GAErC,GAAA,aAAe,OAAQ,OAAO,IAAI,OAAO,GAEzC,GAAe,YAAf,EAAO,EAAA,SAAA,GAAkB,OAAO,EAK9B,IAAA,EAAW,IAAI,EAAI,YACpB,IAAA,IAAM,KAAO,EACZ,EAAI,eAAe,KAErB,EAAS,GAAO,EAAU,EAAI,KAG3B,OAAA,EAET,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAvBA,QAAA,UAAA,EAuBA,QAAA,QAAe;;AClBf,aAAA,IAAA,EAAA,EAAA,QAAA,kCAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAJA,SAAgB,EAAS,GACjB,IAAA,GAAc,EAAA,EAAA,SAAA,GACb,OAAO,MAAP,IAAwB,UAAR,GAA4B,YAAR,GAE7C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAJA,QAAA,SAAA,EAIA,QAAA,QAAe;;ACoBf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/BA,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,eAQA,SAAS,EAAe,GAClB,IAAA,EAAA,EAAA,SAAS,GAAM,CACX,IAAA,GAAc,EAAA,EAAA,SAAU,GAavB,OAZP,EAAO,UAAU,OAAO,UAAY,WAAA,IAAA,EAAA,KAC5B,EAAO,OAAO,KAAK,MACrB,EAAQ,EACL,MAAA,CACL,KAAM,WACG,MAAA,CACL,MAAO,EAAK,EAAK,MACjB,KAAM,EAAQ,EAAK,WAKpB,EAEA,MAAA,CACL,IAAK,iBAIX,QAAA,QAAe","file":"addObjIterator.js","sourceRoot":"..\\..\\src","sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\r\n * @msg:\r\n * @param {object} obj 传入的对象\r\n * @return {object} cloneObj 复制后的对象\r\n * @Descripttion:\r\n */\r\nexport function cloneDeep(obj: any): any {\r\n  // 1.判断是否为null 或undefined\r\n  if (obj == null) return obj;\r\n  if (typeof obj == \"undefined\") return obj;\r\n  // 2.判断是否为日期Date\r\n  if (obj instanceof Date) return new Date(obj);\r\n  // 3.判断是否为正则 typeof /\\d+/ === 'object'\r\n  if (obj instanceof RegExp) return new RegExp(obj);\r\n  // 4.如果不是数组或对象，返回该值\r\n  if (typeof obj !== \"object\") return obj;\r\n  // 接下来，要么是对象，要么是数组 可以用 new obj.constructor得到它类型的空值\r\n  //如果是new,用obj.constructor即可，new方法会访问构造器（构造函数）的原型，再用object.create(constructor.prototype)构造出对象\r\n  //let cloneObj = new obj.constructor;\r\n  //如果是直接object.create，直接使用obj.constructor.prototype属性进行构建\r\n  const cloneObj = new obj.constructor();\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      // 递归深拷贝\r\n      cloneObj[key] = cloneDeep(obj[key]);\r\n    }\r\n  }\r\n  return cloneObj;\r\n}\r\nexport default cloneDeep;\r\n","/**\r\n * @name:\r\n * @msg:\r\n * @param {object} obj 对象\r\n * @return {boolean}\r\n * @Descripttion: 判断是否为对象\r\n */\r\nexport function isObject(obj: object): boolean {\r\n  const type = typeof obj;\r\n  return obj != null && (type == \"object\" || type == \"function\");\r\n}\r\nexport default isObject;\r\n","import cloneDeep from \"./cloneDeep\";\r\nimport isObject from \"./isObject\";\r\n\r\n/**\r\n * @msg:a good method for add iterator\r\n * @param {object} obj\r\n * @return {object} newObj //深拷贝后添加迭代器\r\n * @Descripttion: 给对象添加迭代器，make it possiable to for...in map forEach\r\n */\r\nfunction addObjIterator(obj: object): object {\r\n  if (isObject(obj)) {\r\n    const newObj: any = cloneDeep(obj);\r\n    newObj.prototype[Symbol.iterator] = function () {\r\n      const keys = Object.keys(this);\r\n      let index = 0;\r\n      return {\r\n        next: () => {\r\n          return {\r\n            value: this[keys[index++]],\r\n            done: index > this.length,\r\n          };\r\n        },\r\n      };\r\n    };\r\n    return newObj;\r\n  } else {\r\n    return {\r\n      msg: \"请传入object普通对象\",\r\n    };\r\n  }\r\n}\r\nexport default addObjIterator;\r\n"]}