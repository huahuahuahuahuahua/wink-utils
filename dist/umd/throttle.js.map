{"version":3,"sources":["throttle.ts"],"names":[],"mappings":";AAoEe,aA7CT,SAAU,EACd,EACA,EACA,GAEI,IAAA,EAAsB,KACxB,EAAwB,KACxB,EAAY,KACV,EAAmB,EAClB,IACH,EAAU,CACR,SAAS,EACT,UAAU,IAER,IAAA,EAAQ,WACZ,GAA+B,IAApB,EAAQ,QAAoB,GAAI,IAAI,MAAO,UACtD,EAAU,KACV,EAAK,MAAM,EAAS,GACf,IAAS,EAAU,EAAO,OAE3B,EAAY,WACV,IAAA,GAAM,IAAI,MAAO,UAClB,IAAgC,IAApB,EAAQ,UAAmB,EAAW,GACjD,IAAA,EAAY,GAAQ,EAAM,GAChC,EAAU,KACV,EAAO,UACH,GAAa,GAAK,EAAY,GAC5B,IACF,aAAa,GACb,EAAU,MAEZ,EAAW,EACX,EAAK,MAAM,EAAS,GACf,IAAS,EAAU,EAAO,OACrB,IAAgC,IAArB,EAAQ,WAC7B,EAAU,WAAW,EAAO,KAQzB,OALP,EAAU,OAAS,WACjB,aAAa,GACb,EAAW,EACX,EAAU,MAEL,EAEM,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,QAAA,SAAA,EAAA,IAAA,EAAA,EAAA,QAAA,QAAA","file":"throttle.js","sourceRoot":"..\\..\\src","sourcesContent":["/*\r\n * @Author: t_winkjqzhang\r\n * @Date: 2022-03-31 15:54:52\r\n * @LastEditTime: 2022-04-02 18:12:43\r\n * @Description: Do not edit\r\n */\r\ninterface IThrottle {\r\n  func: Function;\r\n  wait: number;\r\n  options: IOptions;\r\n}\r\n\r\ninterface IOptions {\r\n  leading: boolean;\r\n  trailing: boolean;\r\n}\r\n/**\r\n * @param {Function} func\r\n * @param {number} wait\r\n * @param {IOptions} options\r\n * @return {*}\r\n * @Date: 2022-04-02 10:57:20\r\n */\r\nexport function throttle(\r\n  func: Function,\r\n  wait: number,\r\n  options: IOptions\r\n): Function {\r\n  let timeout: any | null = null,\r\n    context: object | any = null,\r\n    args: any = null; // result\r\n  let previous: number = 0;\r\n  if (!options)\r\n    options = {\r\n      leading: true,\r\n      trailing: true,\r\n    };\r\n  const later = function () {\r\n    previous = options.leading === false ? 0 : new Date().getTime();\r\n    timeout = null;\r\n    func.apply(context, args);\r\n    if (!timeout) context = args = null;\r\n  };\r\n  const throttled = function (this: any) {\r\n    const now = new Date().getTime();\r\n    if (!previous && options.leading === false) previous = now;\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n    if (remaining <= 0 || remaining > wait) {\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n      }\r\n      previous = now;\r\n      func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n  };\r\n  throttled.cancel = () => {\r\n    clearTimeout(timeout);\r\n    previous = 0;\r\n    timeout = null;\r\n  };\r\n  return throttled;\r\n}\r\nexport default throttle;\r\n"]}