{"version":3,"sources":["../node_modules/@babel/runtime/helpers/typeof.js","isObject.ts","debounce.ts","throttle.ts","UrlGetRequest.ts","changefilesize.ts","formatnumber.ts","cloneDeep.ts","index.ts"],"names":["_typeof","obj","module","exports","Symbol","iterator","constructor","prototype","__esModule"],"mappings":"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","file":"index.js","sourceRoot":"..\\..\\src","sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\r\n * @name:\r\n * @msg:\r\n * @param {object} obj 对象\r\n * @return {boolean}\r\n * @Descripttion: 判断是否为对象\r\n */\r\nexport function isObject(obj: object): boolean {\r\n  const type = typeof obj;\r\n  return obj != null && (type == \"object\" || type == \"function\");\r\n}\r\nexport default isObject;\r\n","//debounce.js\r\n\r\nconst FUNC_ERROR_TEXT = \"Expected a function\";\r\n\r\nconst nativeMax = Math.max, //原生最大值方法\r\n  nativeMin = Math.min; //原生最小值方法\r\ninterface IOptions {\r\n  leading?: boolean;\r\n  trailing?: boolean;\r\n  maxWait?: number;\r\n}\r\n/**\r\n * 函数去抖，也就是说当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。\r\n *\r\n * @param {Function} func 需要去抖的函数.\r\n * @param {number} [wait=0] 延迟执行的时间.\r\n * @param {Object} [options={}] 选项对象.\r\n * @param {boolean} [options.leading=false] 指定是否在超时前调用.\r\n * @param {number} [options.maxWait] func延迟调用的最大时间.\r\n * @param {boolean} [options.trailing=true] 指定是否在超时后调用.\r\n * @returns {Function} 返回去抖之后的函数.\r\n * @example\r\n *\r\n * // Avoid costly calculations while the window size is in flux.\r\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n *\r\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n *   'leading': true,\r\n *   'trailing': false\r\n * }));\r\n *\r\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n * var source = new EventSource('/stream');\r\n * jQuery(source).on('message', debounced);\r\n *\r\n * // Cancel the trailing debounced invocation.\r\n * jQuery(window).on('popstate', debounced.cancel);\r\n */\r\n\r\nexport type TAnyFunction = (...args: any[]) => void;\r\nimport isObject from \"./isObject\";\r\nexport function debounce(\r\n  func: TAnyFunction,\r\n  wait = 1000,\r\n  options: IOptions = {}\r\n): TAnyFunction {\r\n  let lastArgs, //上次调用参数\r\n    lastThis, //上次调用this\r\n    maxWait, //最大等待时间\r\n    result, //返回结果\r\n    timerId, //timerId\r\n    lastCallTime, //上次调用debounced时间,即触发时间，不一定会调用func\r\n    lastInvokeTime = 0, //上次调用func时间，即成功执行时间\r\n    leading = false, //超时之前\r\n    maxing = false, //是否传入最大超时时间\r\n    trailing = true; //超时之后\r\n\r\n  if (typeof func != \"function\") {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n  wait = Number(wait) || 0;\r\n  if (isObject(options)) {\r\n    leading = !!options.leading;\r\n    maxing = \"maxWait\" in options;\r\n    maxWait = maxing ? nativeMax(Number(options.maxWait) || 0, wait) : maxWait;\r\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\r\n  }\r\n\r\n  function invokeFunc(time) {\r\n    //调用func，参数为当前时间\r\n    const args = lastArgs, //调用参数\r\n      thisArg = lastThis; //调用的this\r\n\r\n    lastArgs = lastThis = undefined; //清除lastArgs和lastThis\r\n    lastInvokeTime = time; //上次调用时间为当前时间\r\n    result = func.apply(thisArg, args); //调用func，并将结果返回\r\n    return result;\r\n  }\r\n\r\n  function leadingEdge(time) {\r\n    //超时之前调用\r\n    lastInvokeTime = time; //设置上次调用时间为当前时间\r\n    timerId = setTimeout(timerExpired, wait); //开始timer\r\n    return leading ? invokeFunc(time) : result; //如果leading为true，调用func,否则返回result\r\n  }\r\n\r\n  function remainingWait(time): number {\r\n    //设置还需要等待的时间\r\n    const timeSinceLastCall = time - lastCallTime, //距离上次触发的时间\r\n      timeSinceLastInvoke = time - lastInvokeTime, //距离上次调用func的时间\r\n      result = wait - timeSinceLastCall; //还需要等待的时间\r\n\r\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\r\n  }\r\n\r\n  function shouldInvoke(time) {\r\n    //是否应该被调用\r\n    const timeSinceLastCall = time - lastCallTime, //距离上次触发时间的时间\r\n      timeSinceLastInvoke = time - lastInvokeTime; //距离上次调用func的时间\r\n\r\n    return (\r\n      lastCallTime === undefined ||\r\n      timeSinceLastCall >= wait ||\r\n      timeSinceLastCall < 0 ||\r\n      (maxing && timeSinceLastInvoke >= maxWait)\r\n    );\r\n  }\r\n\r\n  function timerExpired() {\r\n    //刷新timer\r\n    const time = new Date();\r\n    if (shouldInvoke(time)) {\r\n      //如果可以调用，调用trailingEdge\r\n      return trailingEdge(time);\r\n    }\r\n    timerId = setTimeout(timerExpired, remainingWait(time)); //不调用则重置timerId\r\n  }\r\n\r\n  function trailingEdge(time) {\r\n    //超时之后调用\r\n    timerId = undefined;\r\n\r\n    // Only invoke if we have `lastArgs` which means `func` has been\r\n    // debounced at least once.\r\n    if (trailing && lastArgs) {\r\n      //如果设置trailing为true,并且有lastArgs，调用func\r\n      return invokeFunc(time);\r\n    }\r\n    lastArgs = lastThis = undefined; //清除lastArgs和lastThis\r\n    return result; //否则返回result\r\n  }\r\n\r\n  function cancel() {\r\n    //取消执行\r\n    if (timerId !== undefined) {\r\n      clearTimeout(timerId);\r\n    }\r\n    lastInvokeTime = 0;\r\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n  }\r\n\r\n  function flush() {\r\n    //直接执行\r\n    return timerId === undefined ? result : trailingEdge(new Date());\r\n  }\r\n\r\n  function debounced(this: any) {\r\n    const time = new Date(),\r\n      isInvoking = shouldInvoke(time); //判断是否可以调用\r\n\r\n    lastArgs = arguments; //得到参数\r\n    lastThis = this; //得到this对象\r\n    lastCallTime = time; //触发时间\r\n\r\n    if (isInvoking) {\r\n      if (timerId === undefined) {\r\n        //首次触发，调用leadingEdge\r\n        return leadingEdge(lastCallTime);\r\n      }\r\n      if (maxing) {\r\n        // 处理多次频繁的调用\r\n        timerId = setTimeout(timerExpired, wait); //设置定时器\r\n        return invokeFunc(lastCallTime);\r\n      }\r\n    }\r\n    if (timerId === undefined) {\r\n      //如果没有timer,设置定时器\r\n      timerId = setTimeout(timerExpired, wait);\r\n    }\r\n    return result; //返回result\r\n  }\r\n  debounced.cancel = cancel;\r\n  debounced.flush = flush;\r\n  return debounced;\r\n}\r\nexport default debounce;\r\n","import { debounce, TAnyFunction } from \"./debounce\";\r\nimport isObject from \"./isObject\";\r\ninterface IOptions {\r\n  leading?: boolean;\r\n  trailing?: boolean;\r\n}\r\n\r\n/**\r\n * @param {TAnyFunction} func\r\n * @param {number} wait\r\n * @param {IOptions} options\r\n * @return {TAnyFunction}\r\n * @Date: 2022-04-02 10:57:20\r\n */\r\n\r\nconst FUNC_ERROR_TEXT = \"Expected a function\";\r\nexport function throttle(\r\n  func: TAnyFunction,\r\n  wait: number,\r\n  options: IOptions = {}\r\n): TAnyFunction {\r\n  let leading = true,\r\n    trailing = true;\r\n\r\n  if (typeof func != \"function\") {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n  if (isObject(options)) {\r\n    leading = \"leading\" in options ? !!options.leading : leading;\r\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\r\n  }\r\n  return debounce(func, wait, {\r\n    leading: leading,\r\n    maxWait: wait,\r\n    trailing: trailing,\r\n  });\r\n}\r\nexport default throttle;\r\n","//分离url参数，获取tagid\r\n\r\n/**\r\n * @param {string} url //完整的url\r\n * @param {string} variable //param参数，键\r\n * @returns {string} //param参数，variable对应的值\r\n * @Date: 2022-04-02 15:03:38\r\n * @Description:url分离出参数\r\n */\r\nexport function UrlGetRequest(url: string, variable: string) {\r\n  let query: string = url.split(\"?\")[1];\r\n  // let query: string = window.location.search.substring(1);\r\n  // 兼容微信授权回来之后 url 错乱的问题\r\n  if (query.indexOf(\"&openid=\") < 0 && query.indexOf(\"openid=\") > 0) {\r\n    query = query.replace(/openid=/, function (m) {\r\n      return \"&\" + m;\r\n    });\r\n  }\r\n  const vars: string[] = query.split(\"&\");\r\n  for (let i = 0; i < vars.length; i++) {\r\n    const pair: string[] = vars[i].split(\"=\");\r\n    if (pair[0] === variable) return pair[1];\r\n  }\r\n  return false;\r\n}\r\nexport default UrlGetRequest;\r\n","/**\r\n * @param {number} limit 二进制文件大小\r\n * @return {string} size  转换后的文件大小\r\n * @Date: 2022-04-02 15:23:27\r\n * @Description:文件转换二进制值为KB,MB...\r\n *\r\n */\r\nexport function changefilesize(limit: number): string {\r\n  let size = \"\";\r\n  if (limit < 0.1 * 1024) {\r\n    //小于0.1KB，则转化成B\r\n    size = limit.toFixed(2) + \"B\";\r\n  } else if (limit < 0.1 * 1024 * 1024) {\r\n    //小于0.1MB，则转化成KB\r\n    size = (limit / 1024).toFixed(2) + \"KB\";\r\n  } else if (limit < 0.1 * 1024 * 1024 * 1024) {\r\n    //小于0.1GB，则转化成MB\r\n    size = (limit / (1024 * 1024)).toFixed(2) + \"MB\";\r\n  } else {\r\n    //其他转化成GB\r\n    size = (limit / (1024 * 1024 * 1024)).toFixed(2) + \"GB\";\r\n  }\r\n\r\n  const sizeStr: string = size + \"\"; //转成字符串\r\n  const index: number = sizeStr.indexOf(\".\"); //获取小数点处的索引\r\n  const dou: string = sizeStr.substr(index + 1, 2); //获取小数点后两位的值\r\n  if (dou === \"00\") {\r\n    //判断后两位是否为00，如果是则删除00\r\n    return sizeStr.substring(0, index) + sizeStr.substr(index + 3, 2);\r\n  }\r\n  return size;\r\n}\r\nexport default changefilesize;\r\n","/**\r\n * @name:\r\n * @msg:\r\n * @param {number} num\r\n * @return {object} number:转换后的值，value：倍数\r\n * @Descripttion: 转换number为指定数值\r\n */\r\nexport function formatNumber(num: number): object {\r\n  num = Number(num);\r\n  if (num === 0) {\r\n    return {\r\n      number: num.toString(),\r\n      value: \"\",\r\n    };\r\n  } else if (num > 1 && num < 1000) {\r\n    return {\r\n      number: num.toString(),\r\n      value: \"\",\r\n    };\r\n  } else if (num > 1000 && num < 10000) {\r\n    //千\r\n    return {\r\n      number: (num / 1000).toFixed(2).toString(),\r\n      value: \"千\",\r\n    };\r\n  } else if (num > 10000 && num < 1000000) {\r\n    //万\r\n    return {\r\n      number: (num / 10000).toFixed(2).toString(),\r\n      value: \"万\",\r\n    };\r\n  } else if (num > 1000000 && num < 10000000) {\r\n    //百万\r\n    return {\r\n      number: (num / 1000000).toFixed(2).toString(),\r\n      value: \"百万\",\r\n    };\r\n  } else if (num > 10000000 && num < 100000000) {\r\n    //千万\r\n    return {\r\n      number: (num / 10000000).toFixed(2).toString(),\r\n      value: \"千万\",\r\n    };\r\n  } else if (num > 100000000 && num < 10000000000) {\r\n    //亿\r\n    return {\r\n      number: (num / 100000000).toFixed(2).toString(),\r\n      value: \"亿\",\r\n    };\r\n  }\r\n  //    else if (num > 10000000000 && num < 100000000000) {\r\n  //     //百亿\r\n  //     return (num / 10000000000).toFixed(2);\r\n  //   } else if (num > 100000000000 && num < 1000000000000) {\r\n  //     //千亿\r\n  //     return (num / 100000000000).toFixed(2);\r\n  //   } else if (num > 1000000000000 && num < 10000000000000) {\r\n  //     //万亿\r\n  //     return (num / 1000000000000).toFixed(2);\r\n  //   }\r\n  else {\r\n    return {\r\n      msg: \"error 请输入1-10000000000 的数字\",\r\n    };\r\n  }\r\n}\r\nexport default formatNumber;\r\n","/**\r\n * @msg:\r\n * @param {object} obj 传入的对象\r\n * @return {object} cloneObj 复制后的对象\r\n * @Descripttion:\r\n */\r\nexport function cloneDeep(obj: any): any {\r\n  // 1.判断是否为null 或undefined\r\n  if (obj == null) return obj;\r\n  if (typeof obj == \"undefined\") return obj;\r\n  // 2.判断是否为日期Date\r\n  if (obj instanceof Date) return new Date(obj);\r\n  // 3.判断是否为正则 typeof /\\d+/ === 'object'\r\n  if (obj instanceof RegExp) return new RegExp(obj);\r\n  // 4.如果不是数组或对象，返回该值\r\n  if (typeof obj !== \"object\") return obj;\r\n  // 接下来，要么是对象，要么是数组 可以用 new obj.constructor得到它类型的空值\r\n  //如果是new,用obj.constructor即可，new方法会访问构造器（构造函数）的原型，再用object.create(constructor.prototype)构造出对象\r\n  //let cloneObj = new obj.constructor;\r\n  //如果是直接object.create，直接使用obj.constructor.prototype属性进行构建\r\n  const cloneObj = new obj.constructor();\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      // 递归深拷贝\r\n      cloneObj[key] = cloneDeep(obj[key]);\r\n    }\r\n  }\r\n  return cloneObj;\r\n}\r\nexport default cloneDeep;\r\n","/*\r\n * @Author: t_winkjqzhang\r\n * @Date: 2022-04-02 15:01:30\r\n * @LastEditTime: 2022-04-17 00:42:33\r\n * @Description: Do not edit\r\n */\r\n\r\n/**\r\n * @name:\r\n * @msg:\r\n * @param {*}\r\n * @return {*}\r\n * @Descripttion: 导出函数\r\n */\r\nexport * from \"./throttle\";\r\nexport * from \"./UrlGetRequest\";\r\nexport * from \"./debounce\";\r\nexport * from \"./changefilesize\";\r\nexport * from \"./formatnumber\";\r\nexport * from \"./isObject\";\r\nexport * from \"./cloneDeep\";\r\n"]}