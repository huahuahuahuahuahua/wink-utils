{"version":3,"sources":["cacheAsync.ts"],"names":[],"mappings":"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","file":"cacheAsync.js","sourceRoot":"..\\..\\src","sourcesContent":["export type TAnyFunction = (...args: any[]) => void;\r\n\r\nexport const OldcacheAsync = (fn: TAnyFunction) => {\r\n  const cache = Object.create(null);\r\n  return async (str: string | number) => {\r\n    const hit = cache[str];\r\n    if (hit) {\r\n      return hit;\r\n    }\r\n    return (cache[str] = await fn(str));\r\n  };\r\n};\r\n/* \r\n每个请求都返回一个新的Promise, Promise的exector的执行时机，通过一个队列保存。\r\n当队列长度为1的时候，执行一次请求，如果请求成功，那么遍历队列中的exector，拿到请求的结果然后resolve。\r\n如果请求失败了，那么就把这个Promise reject掉，同时出栈。然后递归调用next\r\n直到exector队列清空为止\r\n */\r\n/**\r\n * @msg:\r\n * @param {*} promiseGenerator promise function\r\n * @param {*} symbol\r\n * @return {*}\r\n * @Descripttion:多个相同的请求，请求成功，停止，失败，继续\r\n */\r\nexport const UpdateCacheAsync = (promiseGenerator, symbol) => {\r\n  const cache: Map<any, any> = new Map();\r\n  const never: unique symbol = Symbol();\r\n  return async (params) => {\r\n    return new Promise((resolve, reject) => {\r\n      symbol = symbol || params;\r\n      let cacheCfg = cache.get(symbol);\r\n      if (!cacheCfg) {\r\n        cacheCfg = {\r\n          hit: never,\r\n          exector: [{ resolve, reject }],\r\n        };\r\n        cache.set(symbol, cacheCfg);\r\n      } else {\r\n        if (cacheCfg.hit !== never) {\r\n          return resolve(cacheCfg.hit);\r\n        }\r\n        cacheCfg.exector.push({ resolve, reject });\r\n      }\r\n      const { exector } = cacheCfg;\r\n      if (exector.length === 1) {\r\n        const next = async () => {\r\n          try {\r\n            if (!exector.length) return;\r\n            const response = await promiseGenerator(params);\r\n            while (exector.length) {\r\n              exector.shift().resolve(response);\r\n            }\r\n            cacheCfg.hit = response;\r\n          } catch (error) {\r\n            const { reject } = exector.shift();\r\n            reject(error);\r\n            next();\r\n          }\r\n        };\r\n        next();\r\n      }\r\n    });\r\n  };\r\n};\r\nexport async function fetchData(a: string | number) {\r\n  const data = await fetch(\"//127.0.0.1:8888\");\r\n  console.log(data);\r\n  const d = JSON.stringify(data);\r\n  console.log(d);\r\n  return d;\r\n}\r\nfunction test() {\r\n  const fetch2 = OldcacheAsync(fetchData);\r\n  fetch2(2);\r\n  fetch2(2);\r\n  fetch2(2);\r\n  fetch2(2);\r\n  fetch2(2);\r\n\r\n  async function fetch(str: string) {\r\n    let count = 1;\r\n    return (function () {\r\n      let o = new Object();\r\n      return (o = {\r\n        str: str,\r\n        value: count++,\r\n      });\r\n    })();\r\n  }\r\n}\r\n"]}